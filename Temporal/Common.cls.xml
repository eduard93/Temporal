<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Temporal.Common">
<Description>
Общие методы для данных с историей.</Description>
<Abstract>1</Abstract>
<TimeCreated>64302,73334.212591</TimeCreated>

<Property name="%ts">
<Description>
Дата, на которую открыт объект. Устанавливается только через метод OpenAt(id,date, debug)
Пусто - открыта последняя версия</Description>
<Type>%Integer</Type>
<Transient>1</Transient>
</Property>

<Property name="%state">
<Description>
Открывать объект до или после отметки времени %ts</Description>
<Type>%Integer</Type>
<Transient>1</Transient>
</Property>

<Method name="openAt">
<Description>
Open object at the specific point in time
Открыть объект на определённую дату timestamp</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%Integer,concurrency:%Integer=-1,&sc:%Status=$$$OK,state:%String(VALUELIST=",-1,1",DISPLAYLIST=",before,after")=1,timestamp:%TimeStamp={$zdt($ztimestamp,3,1,3)},debug:%Boolean=$$$NO]]></FormalSpec>
<ReturnType>Temporal.Simple</ReturnType>
<Implementation><![CDATA[
	set obj = ..%OpenId(id, concurrency, .sc)
	if $$$ISOK(sc) {
		set sc = obj.setAt(state, timestamp, debug)		
	}
	return obj
]]></Implementation>
</Method>

<Method name="setAt">
<Description>
Internal method to set timestamp/state
Внутренний метод установки %state/%ts</Description>
<FormalSpec>state:%String(VALUELIST=",-1,1",DISPLAYLIST=",before,after")=1,timestamp:%TimeStamp={$zdt($ztimestamp,3,1,3)},debug:%Boolean=$$$NO</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set i%%state = state
	set i%%ts = ..ts2unixtime(timestamp, debug)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="AtTime">
<Description>
To get data at the specific point of time add this procedure
Для получения данных на определённый момент времени добавляем: 
WHERE Temporal.AtTime(1,1484820252,1)=1 или Temporal.AtTime(,'2017-01-19 00:18:14.000')=1
Процедура выполняется 1 раз за запрос.
w ##class(Utils.Temp).AtTime("2017-01-19 00:18:14.000"),!,%ts 1484815635
w ##class(Utils.Temp).AtTime(1484815635) - debug</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>state:%String(VALUELIST=",-1,1",DISPLAYLIST=",before,after")=1,timestamp:%TimeStamp={$zdt($ztimestamp,3,1,3)},debug:%Boolean=$$$NO</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<SqlName>AtTime</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set %state = state
	set %ts = ..ts2unixtime(timestamp, debug)
	q $$$YES
]]></Implementation>
</Method>

<Method name="clean">
<Description>
Удалить вспомогательные переменные %ts,%state</Description>
<ClassMethod>1</ClassMethod>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	kill %ts,%state
]]></Implementation>
</Method>

<Method name="ts2unixtime">
<Description>
Преобразование даты в unixtime</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>timestamp:%TimeStamp={$zdt($ztimestamp,3,1,3)},debug:%Boolean=$$$NO</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	if debug {
		set ts=timestamp
	} else {
		set ts=$zdt($zdth(timestamp,3),-2) // _ $p(timestamp,".",2)
	}
	return ts
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<Description>
Перед попыткой сохранения проверяем, что мы открыли последнюю версию объекта.</Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set sc = $$$OK
	if ..%ts {
		set sc = $$$ERROR($$$GeneralError, "Can't save. History data.")
		
	}
	quit sc
]]></Implementation>
</Method>
</Class>
</Export>
