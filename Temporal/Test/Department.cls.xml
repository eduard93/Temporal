<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Temporal.Test.Department">
<Super>%Persistent,Temporal.Common,Temporal.Populate</Super>
<TimeCreated>64316,2730.109476</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Manager">
<Type>Temporal.Test.Person</Type>
<SqlComputeCode>set {*} = ##class(Temporal.Test.Department).ManagerGetStatic({ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Transient>1</Transient>
<Parameter name="TIMEPROPERTY" value="1"/>
</Property>

<Property name="Description">
<Type>%String</Type>
<SqlComputeCode>set {*} = ##class(Temporal.Test.Department).DescriptionGetStatic({ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Transient>1</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TIMEPROPERTY" value="1"/>
</Property>

<Method name="add">
<ClassMethod>1</ClassMethod>
<FormalSpec>i</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ..%New(##class(%PopulateUtils).Mission(), ##class(Temporal.Test.User).getRandomUser(), ##class(%PopulateUtils).Company())
	quit obj.%Save()
]]></Implementation>
</Method>

<Method name="upd">
<Description>
Обновить объект</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id,random</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ..%OpenId(id)
	
	// В 1 из 10 проходоав меняем руководителя
	if $random(11)>9 {
		set obj.Manager = ##class(Temporal.Test.User).getRandomUser()
	}
	quit obj.%Save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Temporal.Test.DepartmentD</DataLocation>
<DefaultData>DepartmentDefaultData</DefaultData>
<IdLocation>^Temporal.Test.DepartmentD</IdLocation>
<IndexLocation>^Temporal.Test.DepartmentI</IndexLocation>
<StreamLocation>^Temporal.Test.DepartmentS</StreamLocation>
<Data name="DepartmentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Manager</Value>
</Value>
<Value name="4">
<Value>Description</Value>
</Value>
</Data>
</Storage>

<Method name="%OnAfterSave">
<Description>
Execute after each save to store temporal data</Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ts = ..ts2unixtime()
	set id = ..%Id()
	
	if ((insert = $$$YES) || (^Temporal.Test.DepartmentDDescription(id) '= i%Description)) {
		set ^Temporal.Test.DepartmentDDescription(id) = i%Description
		set ^Temporal.Test.DepartmentDDescription(id, ts) = i%Description 
	}
	set ManagerId = $s($isObject(r%Manager):r%Manager.%Id(), 1:"")
	if ((insert = $$$YES) || (^Temporal.Test.DepartmentDManager(id) '= ManagerId)) {
		set ^Temporal.Test.DepartmentDManager(id) = ManagerId
		set ^Temporal.Test.DepartmentDManager(id, ts) = ManagerId
	}

	quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>Description:%Library.String="",Manager:Temporal.Test.User="",Name:%Library.String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..Description = Description
	set ..Manager = Manager
	set ..Name = Name
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ManagerGet">
<Description>
Manager getter method in object context</Description>
<ReturnType>Temporal.Test.User</ReturnType>
<Implementation><![CDATA[
	set id = ..%Id()
	return:'id i%Manager
	return:i%Manager i%Manager
	
	if '..%unixtime {
		set val = ^Temporal.Test.DepartmentDManager(id) 
	} elseif $d(^Temporal.Test.DepartmentDManager(id, ..%unixtime), val) {
	} elseif $o(^Temporal.Test.DepartmentDManager(id, ..%unixtime), ..%state, val) {
	} elseif ..%state=1 {
		set temp = $o(^Temporal.Test.DepartmentDManager(id, ..%unixtime), -1, val)
	}
	set i%Manager = ##class(Temporal.Test.User).%OpenId(val) 
	return i%Manager
]]></Implementation>
</Method>

<Method name="ManagerGetStatic">
<Description>
Manager getter method in SQL context</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer</FormalSpec>
<ReturnType>Temporal.Test.User</ReturnType>
<Implementation><![CDATA[
	return:$d(%unixtime)=0 $g(^Temporal.Test.DepartmentDManager(id),"")
	return:$d(^Temporal.Test.DepartmentDManager(id, %unixtime), val)=1 val
	return:$o(^Temporal.Test.DepartmentDManager(id, %unixtime), %state, val) val
	if %state=1 {
		set temp = $o(^Temporal.Test.DepartmentDManager(id, %unixtime), -1, val)
		return val
	}
	return ""
]]></Implementation>
</Method>

<Method name="DescriptionGet">
<Description>
Description getter method in object context</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set id = ..%Id()
	return:'id i%Description
	return:i%Description i%Description
	
	if '..%unixtime {
		set val = ^Temporal.Test.DepartmentDDescription(id) 
	} elseif $d(^Temporal.Test.DepartmentDDescription(id, ..%unixtime), val) {
	} elseif $o(^Temporal.Test.DepartmentDDescription(id, ..%unixtime), ..%state, val) {
	} elseif ..%state=1 {
		set temp = $o(^Temporal.Test.DepartmentDDescription(id, ..%unixtime), -1, val)
	}
	set i%Description = val 
	return i%Description
]]></Implementation>
</Method>

<Method name="DescriptionGetStatic">
<Description>
Description getter method in SQL context</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	return:$d(%unixtime)=0 $g(^Temporal.Test.DepartmentDDescription(id),"")
	return:$d(^Temporal.Test.DepartmentDDescription(id, %unixtime), val)=1 val
	return:$o(^Temporal.Test.DepartmentDDescription(id, %unixtime), %state, val) val
	if %state=1 {
		set temp = $o(^Temporal.Test.DepartmentDDescription(id, %unixtime), -1, val)
		return val
	}
	return ""
]]></Implementation>
</Method>

<Method name="KillExtent">
<Description>
Kill extent</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill ^Temporal.Test.DepartmentD
	kill ^Temporal.Test.DepartmentDDescription
	kill ^Temporal.Test.DepartmentDManager
	quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
