<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Temporal.Test.Document">
<Super>%Persistent,Temporal.Common,Temporal.Populate</Super>
<TimeCreated>64316,2640.528257</TimeCreated>

<Property name="Author">
<Type>Temporal.Test.Person</Type>
<SqlComputeCode>set {*} = ##class(Temporal.Test.Document).AuthorGetStatic({ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Transient>1</Transient>
<Parameter name="TIMEPROPERTY" value="1"/>
</Property>

<Property name="Text">
<Type>%String</Type>
<SqlComputeCode>set {*} = ##class(Temporal.Test.Document).TextGetStatic({ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Transient>1</Transient>
<Parameter name="MAXLEN"/>
<Parameter name="TIMEPROPERTY" value="1"/>
</Property>

<Method name="add">
<ClassMethod>1</ClassMethod>
<FormalSpec>i</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ..%New(##class(Temporal.Test.User).getRandomUser(), ##class(%PopulateUtils).Mission())
	quit obj.%Save()
]]></Implementation>
</Method>

<Method name="upd">
<Description>
Обновить объект</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id,random</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set obj = ..%OpenId(id)
	
	set obj.Author = ##class(Temporal.Test.User).getRandomUser()
	set obj.Text = ##class(%PopulateUtils).Mission()
	
	quit obj.%Save()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Temporal.Test.DocumentD</DataLocation>
<DefaultData>DocumentDefaultData</DefaultData>
<IdLocation>^Temporal.Test.DocumentD</IdLocation>
<IndexLocation>^Temporal.Test.DocumentI</IndexLocation>
<StreamLocation>^Temporal.Test.DocumentS</StreamLocation>
<Data name="DocumentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Author</Value>
</Value>
<Value name="3">
<Value>Text</Value>
</Value>
</Data>
</Storage>

<Method name="%OnAfterSave">
<Description>
Execute after each save to store temporal data</Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ts = ..ts2unixtime()
	set id = ..%Id()
	set AuthorId = $s($isObject(r%Author):r%Author.%Id(), 1:"")
	if ((insert = $$$YES) || (^Temporal.Test.DocumentDAuthor(id) '= AuthorId)) {
		set ^Temporal.Test.DocumentDAuthor(id) = AuthorId
		set ^Temporal.Test.DocumentDAuthor(id, ts) = AuthorId
	}
	
	if ((insert = $$$YES) || (^Temporal.Test.DocumentDText(id) '= i%Text)) {
		set ^Temporal.Test.DocumentDText(id) = i%Text
		set ^Temporal.Test.DocumentDText(id, ts) = i%Text 
	}

	quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnNew">
<FormalSpec>Author:Temporal.Test.User="",Text:%Library.String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ..Author = Author
	set ..Text = Text
	quit $$$OK
]]></Implementation>
</Method>

<Method name="AuthorGet">
<Description>
Author getter method in object context</Description>
<ReturnType>Temporal.Test.User</ReturnType>
<Implementation><![CDATA[
	set id = ..%Id()
	return:'id i%Author
	return:i%Author i%Author
	
	if '..%unixtime {
		set val = ^Temporal.Test.DocumentDAuthor(id) 
	} elseif $d(^Temporal.Test.DocumentDAuthor(id, ..%unixtime), val) {
	} elseif $o(^Temporal.Test.DocumentDAuthor(id, ..%unixtime), ..%state, val) {
	} elseif ..%state=1 {
		set temp = $o(^Temporal.Test.DocumentDAuthor(id, ..%unixtime), -1, val)
	}
	set i%Author = ##class(Temporal.Test.User).%OpenId(val) 
	return i%Author
]]></Implementation>
</Method>

<Method name="AuthorGetStatic">
<Description>
Author getter method in SQL context</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer</FormalSpec>
<ReturnType>Temporal.Test.User</ReturnType>
<Implementation><![CDATA[
	return:$d(%unixtime)=0 $g(^Temporal.Test.DocumentDAuthor(id),"")
	return:$d(^Temporal.Test.DocumentDAuthor(id, %unixtime), val)=1 val
	return:$o(^Temporal.Test.DocumentDAuthor(id, %unixtime), %state, val) val
	if %state=1 {
		set temp = $o(^Temporal.Test.DocumentDAuthor(id, %unixtime), -1, val)
		return val
	}
	return ""
]]></Implementation>
</Method>

<Method name="TextGet">
<Description>
Text getter method in object context</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set id = ..%Id()
	return:'id i%Text
	return:i%Text i%Text
	
	if '..%unixtime {
		set val = ^Temporal.Test.DocumentDText(id) 
	} elseif $d(^Temporal.Test.DocumentDText(id, ..%unixtime), val) {
	} elseif $o(^Temporal.Test.DocumentDText(id, ..%unixtime), ..%state, val) {
	} elseif ..%state=1 {
		set temp = $o(^Temporal.Test.DocumentDText(id, ..%unixtime), -1, val)
	}
	set i%Text = val 
	return i%Text
]]></Implementation>
</Method>

<Method name="TextGetStatic">
<Description>
Text getter method in SQL context</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	return:$d(%unixtime)=0 $g(^Temporal.Test.DocumentDText(id),"")
	return:$d(^Temporal.Test.DocumentDText(id, %unixtime), val)=1 val
	return:$o(^Temporal.Test.DocumentDText(id, %unixtime), %state, val) val
	if %state=1 {
		set temp = $o(^Temporal.Test.DocumentDText(id, %unixtime), -1, val)
		return val
	}
	return ""
]]></Implementation>
</Method>

<Method name="KillExtent">
<Description>
Kill extent</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill ^Temporal.Test.DocumentD
	kill ^Temporal.Test.DocumentDAuthor
	kill ^Temporal.Test.DocumentDText
	quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
