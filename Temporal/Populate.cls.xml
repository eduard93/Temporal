<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Temporal.Populate">
<Description>
Утилиты генерации данных.</Description>
<Abstract>1</Abstract>
<TimeCreated>64302,73608.331208</TimeCreated>

<Method name="populate">
<Description>
Создать count записей, обновить значение каждой updCycles раз
Удалить все данные, если установлен rebuild
do ##class(Temporal.Simple).populate()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>count=1000000,updCycles=10,rebuild=$$$NO</FormalSpec>
<Implementation><![CDATA[
	do:rebuild ..KillExtent()
	
	do:rebuild ..massAdd(count)
	do ..massAllUpd(updCycles)
	
	//do ##class(%SQL.Statement).%ExecDirect(,"select * from "_$classname()).%Display()
]]></Implementation>
</Method>

<Method name="massAdd">
<Description>
Добавить count записей</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>count</FormalSpec>
<Implementation><![CDATA[
	for i = 1:1:count {
		set sc = ..add(i)
		write:$$$ISERR(sc) $System.Status.GetErrorText(sc)
	}
]]></Implementation>
</Method>

<Method name="add">
<Description>
Добавить 1 запись</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>data</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="massAllUpd">
<Description>
Провести count циклов перезаписи всех данных</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>count</FormalSpec>
<Implementation><![CDATA[
	for i = 1:1:count {
		do ..allUpd(..lastId())
	}
]]></Implementation>
</Method>

<Method name="allUpd">
<Description>
Обновит все объекты класса случайными данными</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>count</FormalSpec>
<Implementation><![CDATA[
	for i = 1:1:count {
		set sc = ..upd(i, $random(count))
		write:$$$ISERR(sc) $System.Status.GetErrorText(sc)
	}
]]></Implementation>
</Method>

<Method name="upd">
<ClassMethod>1</ClassMethod>
<FormalSpec>id,data</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit $$$OK
]]></Implementation>
</Method>

<Method name="lastId">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set global = ..getDataGlobal(%compiledclass.Name)
	quit:global="" $$$OK
    do %code.WriteLine(" Return $Order(" _ global _ "(""""), -1)")
    quit $$$OK
]]></Implementation>
</Method>

<Method name="getDataGlobal">
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	return:'$$$comClassDefined(class) ""
	set strategy = $$$comClassKeyGet(class, $$$cCLASSstoragestrategy)
	return:strategy="" ""
	return $$$defMemberKeyGet(class, $$$cCLASSstorage, strategy, $$$cSDEFdatalocation)
]]></Implementation>
</Method>

<Method name="generateOnNew">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	quit:%class.Abstract $$$OK
	#dim sc As %Status = $$$OK
	#dim method As %Dictionary.MethodDefinition = ##class(Temporal.Utils.Dictionary).getMethod(%class, "%OnNew")
	
	set method.ReturnType = "%Status"
	
	do method.Implementation.Clear()
	
	set spec = ""
	for i=1:1:%compiledclass.Properties.Count() {
		#dim property As %Dictionary.CompiledProperty
		set property = %compiledclass.Properties.GetAt(i)
		set propertyName = property.Name
		set propertyType = property.Type
		CONTINUE:propertyName["%"
		
		set spec = spec _ $lb(propertyName _ ":" _ propertyType _ "=""""")
		do method.Implementation.Write($c(9) _ "set .." _ propertyName _ " = " _ propertyName _ $$$NL)
	}
	do method.Implementation.Write($c(9) _ "quit $$$OK")
	set method.FormalSpec = $lts(spec)
	quit method.%Save()
]]></Implementation>
</Method>
</Class>
</Export>
