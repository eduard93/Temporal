<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Temporal.Remove">
<Description>
Removes Temporal datatypes from class</Description>
<Abstract>1</Abstract>
<IncludeCode>Temporal</IncludeCode>
<TimeCreated>64320,83335.909186</TimeCreated>

<Method name="removeFromAllClasses">
<Description>
Entry point. Converts all user classes.
w $System.Status.GetErrorText(##class(Temporal.Remove).removeFromAllClasses())</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	set sc = ..removeFromSubclassesOf($$$SuperClass)
	quit sc
]]></Implementation>
</Method>

<Method name="removeFromSubclassesOf">
<Description>
Entry point. Converts all subclasses Of class (and class itself).
w $System.Status.GetErrorText(##class(Temporal.Remove).removeFromSubclassesOf())</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%Dictionary.CacheClassname</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	set rs = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:SubclassOf")
	set sc = rs.%Execute(class)
	quit:$$$ISERR(sc) 
	
	set classes(class) = ""

	while (rs.%Next(.sc)) {
		quit:$$$ISERR(sc)		
		set classes(rs.Data("Name")) = ""
	}
	
	set sc = ..removeFromClassLocal(.classes)
	quit sc
]]></Implementation>
</Method>

<Method name="removeFromMatchingClasses">
<Description>
Entry point. Converts all classes matching Mask pattern .
w $System.Status.GetErrorText(##class(Temporal.Remove).removeFromMatchingClasses())</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mask:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	set mask = $translate(mask, "*", "%")
	
	set sql = "SELECT ID FROM %Dictionary.ClassDefinition Where ID LIKE ? AND Super [ ?"
	set st = ##class(%SQL.Statement).%New()
	set sc = st.%Prepare(sql)
	quit:$$$ISERR(sc) sc
	
	#dim rs As %SQL.StatementResult
	set rs = st.%Execute(mask, $$$SuperClass)
	
	while rs.%Next() {
		set classes(rs.%GetData(1)) = ""
	}
	
	set sc = ..removeFromClassLocal(.classes)
	quit sc
]]></Implementation>
</Method>

<Method name="removeFromClassLocal">
<Description>
Iterates over Classes local and converts them.
w $System.Status.GetErrorText(##class(Temporal.Remove).removeFromClassLocal())</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&classes:%Dictionary.CacheClassname]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc,sc1 As %Status = $$$OK
	set classname = ""
	for { 
		set classname = $Order(classes(classname)) 
		quit:classname=""
		set sc1 = ..removeFromClass(classname)
		set sc = $$$ADDSC(sc, sc1)		
	}
	quit sc
]]></Implementation>
</Method>

<Method name="removeFromClass">
<Description>
Convert one class.
w $System.Status.GetErrorText(##class(Temporal.Remove).removeFromClass())</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>classname:%Dictionary.CacheClassname</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	
	set class = ##class(%Dictionary.ClassDefinition).%OpenId(classname,,.sc)
	quit:$$$ISERR(sc) sc

	for i=1:1:class.Properties.Count() {
		#dim property As %Dictionary.PropertyDefinition
		set property = class.Properties.GetAt(i)
		CONTINUE:property.Parameters.GetAt("TIMEPROPERTY")'=$$$YES // Property is not a time roperty
		set sc = ..removePropertyMethods(class, property)
		quit:$$$ISERR(sc)
		set sc = ..setPropertyObject(property)
		quit:$$$ISERR(sc)			
	}
	quit:$$$ISERR(sc) sc
	
	set sc = ..removeClassMethods(class, property)
	quit:$$$ISERR(sc) sc
	
	do ..removeSuperClass(class)

	set sc = class.%Save()
	
	quit sc
]]></Implementation>
</Method>

<Method name="removePropertyMethods">
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%Dictionary.ClassDefinition,property:%Dictionary.PropertyDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	
	set methodsList = $lb("Get", "GetStored","GetStatic")
	set propertyName = property.Name
	for i=1:1:$ll(methodsList) {
		set methodName = propertyName _ $lg(methodsList, i)
		set methodPosition = class.Methods.FindObjectId(class.Name _ "||" _ methodName)
		CONTINUE:methodPosition=""
		do class.Methods.RemoveAt(methodPosition)
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="removeClassMethods">
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%Dictionary.ClassDefinition,property:%Dictionary.PropertyDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	
	set methodsList = $lb("%OnAfterSave")
	for i=1:1:$ll(methodsList) {
		set methodName = $lg(methodsList, i)
		set methodPosition = class.Methods.FindObjectId(class.Name _ "||" _ methodName)
		CONTINUE:methodPosition=""
		do class.Methods.RemoveAt(methodPosition)
	}
	quit sc
]]></Implementation>
</Method>

<Method name="removeSuperClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%Dictionary.ClassDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim sc As %Status = $$$OK
	
	set superList = $lfs($tr(class.Super, " ", ""))
	set commponPosition = $lf(superList, $$$SuperClass)
	set:commponPosition'="" $list(superList, commponPosition, commponPosition) = ""
	set class.Super = $lts(superList)
	
	quit sc
]]></Implementation>
</Method>

<Method name="setPropertyObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>property:%Dictionary.PropertyDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	/// Remove:
	/// [ SqlComputeCode = {set {*} = ##class(class).propertyGetStatic({ID})}, SqlComputed, Transient ];

	set property.Transient = $$$NO
	set property.SqlComputed = $$$NO
	set property.SqlComputeCode = ""
	do property.Parameters.RemoveAt("TIMEPROPERTY")

	quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
